schema {
  query: Query
}

directive @discriminator(subgraph: String, field: String, mapping: [[String]]) on INTERFACE | UNION

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: [[String]], httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean, queryStringOptions: ObjMap) on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: [[String]], queryStringOptions: ObjMap, queryParams: [[String]]) repeatable on SCHEMA

type Cat implements Pet {
  cat_exclusive: String!
  name: String!
  petType: String
}

interface Pet @discriminator(subgraph: "petStore", field: "petType", mapping: [["cat", "Cat"], ["dog", "Dog"]]) {
  name: String!
  petType: String
}

type Dog implements Pet {
  dog_exclusive: String!
  name: String!
  petType: String
}

type Query {
  pets_by_id(id: String!): Pet @httpOperation(subgraph: "petStore", path: "/pets/{args.id}", operationSpecificHeaders: [["accept", "application/json"]], httpMethod: GET)
  greeting(name: String!): String!
}

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}

scalar ObjMap